/*

DELA LUNA, MICHELLE
DIAMZON  NEIL  ARONN S.

OPERATING SYSTEM LAB 02 & 03

 */
import java.util.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static java.awt.image.ImageObserver.WIDTH;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author neila
 */
public class CPU_with_MVT_1 extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public CPU_with_MVT_1() {
        initComponents();
        this.setLocationRelativeTo(null);
    
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startbtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Datas = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        Gantt = new javax.swing.JTable();
        FilePath = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        stopbtn = new javax.swing.JButton();
        AWT = new javax.swing.JLabel();
        ATT = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        currentSeconds = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        Q2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        Q1 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        Q3 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        delaySelector = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        cpuBox = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        inputQueue = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        MemRun = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(926, 600));
        setResizable(false);
        setSize(new java.awt.Dimension(1564, 579));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        startbtn.setText("Start");
        startbtn.setEnabled(false);
        startbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startbtnActionPerformed(evt);
            }
        });

        Datas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Job", "AT", "CPU Burst", "Finish Time", "Turn around time", "Waiting time", "Status", "Job Type", "Size (K)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Datas.setEnabled(false);
        Datas.setName(""); // NOI18N
        jScrollPane1.setViewportView(Datas);

        Gantt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Duration", "Job#"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(Gantt);

        FilePath.setToolTipText("");
        FilePath.setEnabled(false);
        FilePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilePathActionPerformed(evt);
            }
        });
        FilePath.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                FilePathPropertyChange(evt);
            }
        });

        jButton2.setText("Choose File");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Pause");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Gantt Chart");

        jLabel2.setText("Average waiting time:");

        jLabel3.setText("Average turn around time:");

        jLabel4.setText("Interval(ms)");

        stopbtn.setText("Stop/Clear");
        stopbtn.setEnabled(false);
        stopbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopbtnActionPerformed(evt);
            }
        });

        AWT.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        AWT.setForeground(new java.awt.Color(255, 51, 51));
        AWT.setText("0");

        ATT.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ATT.setForeground(new java.awt.Color(255, 0, 0));
        ATT.setText("0");

        jLabel5.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel5.setText("Dela Luna - Diamzon");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("MLQ-MVT");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Timer:");

        currentSeconds.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        currentSeconds.setText("0");

        jButton5.setText("Resume");
        jButton5.setEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        Q2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Job", "CPU Burst"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(Q2);

        Q1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Job", "CPU Burst"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(Q1);

        Q3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Job", "CPU Burst"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(Q3);
        if (Q3.getColumnModel().getColumnCount() > 0) {
            Q3.getColumnModel().getColumn(1).setHeaderValue("CPU Burst");
        }

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Q1");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Q2");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Q3");

        delaySelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delaySelectorActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("CPU:");

        cpuBox.setEditable(false);
        cpuBox.setBackground(new java.awt.Color(255, 255, 255));
        cpuBox.setFont(new java.awt.Font("MingLiU-ExtB", 1, 24)); // NOI18N
        cpuBox.setForeground(new java.awt.Color(255, 51, 51));
        cpuBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        cpuBox.setText("-");

        inputQueue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Job", "CPU Burst", "Size"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(inputQueue);
        if (inputQueue.getColumnModel().getColumnCount() > 0) {
            inputQueue.getColumnModel().getColumn(1).setHeaderValue("CPU Burst");
        }

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Input Queue");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setText("Memory");

        MemRun.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Size (K)", "Job"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(MemRun);

        jButton4.setText("Back to Main Menu");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGap(24, 24, 24)
                                .addComponent(FilePath)
                                .addGap(101, 101, 101)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(160, 160, 160)
                                .addComponent(jLabel13))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(106, 106, 106))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 55, Short.MAX_VALUE)
                                        .addComponent(jLabel12)
                                        .addGap(88, 88, 88))))
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(stopbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(delaySelector, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(156, 156, 156)
                                        .addComponent(jLabel11))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(startbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(currentSeconds))
                                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addComponent(cpuBox, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ATT)
                                    .addComponent(AWT))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel13))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(delaySelector, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel11)
                                        .addComponent(jLabel7)
                                        .addComponent(currentSeconds)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(startbtn)
                                    .addComponent(jButton3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(stopbtn)
                                    .addComponent(jButton5)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(AWT))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(ATT)))
                                .addComponent(cpuBox, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(17, 17, 17))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(11, 11, 11))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(118, 118, 118))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    String[] JID = new String[50];
    double[] arrivaltime = new double[50];
    double[] CBurst= new double[50];
    double[] turnaround= new double[50];
    double[] waitingtime= new double[50];
    double[] memsize = new double [50];
    double temp = 0;
    int totalNumberOfJobs = 0;
    int counter = 0;
    int currentjob = 0;
    int indexCount = 0;
    String lastjob = "";
    boolean doneflag= false;
    Timer t;
    int qIndicator = 0;
    int lastTime = 0;
    int state = 0;
    int neg = 0;
    int fullsize = 64;
    //PUTS ON GANT TABLE THE TIME AND THE JOB CURRENTLY RUNNING
    private void putOnGantt(Integer Duration, Object Job){
         DefaultTableModel model = (DefaultTableModel) Gantt.getModel();
         model.addRow(new Object[]{Duration,Job.toString()});
         cpuBox.setText(Job.toString());
    }
    
//    private void putonMemChart(Object Job, Integer CpuBt, Integer SizeMem ){
//         DefaultTableModel modelmem = (DefaultTableModel) inputQueue.getModel();
//         modelmem.addRow(new Object[]{Job.toString(),CpuBt,SizeMem});
//         cpuBox.setText(Job.toString());
//    }
    
    // MVT BEST FIT ALLOCATION
    int filesize[];
    
    
    //RUNTABLE ACCEPTS THE TABLE TO RUN AND TIME AND JOB AS PARAMETERS 
    private void runTable(JTable table, Integer Job, Integer time){
        table.setValueAt(Integer.parseInt(table.getValueAt(0, 1).toString())-1, Job, 1);        
        if (Integer.parseInt(table.getValueAt(0, 1).toString())==0){ 
            DefaultTableModel modelqueue = (DefaultTableModel) inputQueue.getModel();
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            DefaultTableModel model1 = (DefaultTableModel) Datas.getModel(); 
            DefaultTableModel model2 = (DefaultTableModel) MemRun.getModel();
            modelqueue.removeRow(0);
            model1.setValueAt("Done",table.convertRowIndexToModel(getRowByValue(Datas,table.getValueAt(0, 0).toString())),6);
            time += 1;
            model1.setValueAt(time-Integer.parseInt(Datas.getValueAt(Datas.convertRowIndexToModel(getRowByValue(Datas,table.getValueAt(0, 0).toString())), 1).toString()),Datas.convertRowIndexToModel(getRowByValue(Datas,table.getValueAt(0, 0).toString())),4);
            model1.setValueAt(time,Datas.convertRowIndexToModel(getRowByValue(Datas,table.getValueAt(0, 0).toString())),3);
            model1.setValueAt(Integer.parseInt(Datas.getValueAt(getRowByValue(Datas,table.getValueAt(0, 0).toString()), 4).toString())-Integer.parseInt(Datas.getValueAt(getRowByValue(Datas,table.getValueAt(0, 0).toString()), 2).toString()),Datas.convertRowIndexToModel(getRowByValue(Datas,table.getValueAt(0, 0).toString())),5);
            putOnGantt(time, table.getValueAt(0, 0));
            model.removeRow(0);
            model2.setRowCount(0);
            totalNumberOfJobs++;                   
        }
        else{
            putOnGantt(time, table.getValueAt(0, 0));
            
        }
    }
    void addToQueue(Integer jobNumber, Integer queueNumber, Integer CBT){
        DefaultTableModel modelQ1 = (DefaultTableModel) Q1.getModel();
        DefaultTableModel modelQ2 = (DefaultTableModel) Q2.getModel();
        DefaultTableModel modelQ3 = (DefaultTableModel) Q3.getModel();
        if (queueNumber == 1){
             modelQ1.addRow(new Object[]{jobNumber, CBT}); 
        }
        if (queueNumber == 2){
             modelQ2.addRow(new Object[]{jobNumber, CBT}); 
        }
        if (queueNumber == 3){
             modelQ3.addRow(new Object[]{jobNumber, CBT}); 
        }
    }
    private void startbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startbtnActionPerformed
        //START
      
        if(FilePath.getText().length()>0&&Datas.getRowCount()>0){
            doneflag = false;
            qIndicator = 0;
              startbtn.setEnabled(false);
        jButton3.setEnabled(true);
        jButton5.setEnabled(false);
        stopbtn.setEnabled(true);
            if(Datas.getRowCount()>0){
     //TIMER
              t = new Timer(Integer.parseInt(delaySelector.getSelectedItem().toString()), new ActionListener(){
                    @Override
                    public void actionPerformed(ActionEvent e){
                        doneflag = false;
        //CHECK ARRIVAL TIME
                        for (int i = 0; i < Datas.getRowCount(); i++){
                            
                            
                            if(Integer.parseInt(Datas.getValueAt(i, 1).toString()) == counter){
                                DefaultTableModel model1 = (DefaultTableModel) Datas.getModel();
                                if(Integer.parseInt(Datas.getValueAt(i, 7).toString()) == 1){
                                    DefaultTableModel model = (DefaultTableModel) Q1.getModel();
                                    model.addRow(new Object[]{ Integer.parseInt(Datas.getValueAt(i, 0).toString()),  Integer.parseInt(Datas.getValueAt(i, 2).toString())});  
                                }
                                if(Integer.parseInt(Datas.getValueAt(i, 7).toString()) == 2){
                                    DefaultTableModel model = (DefaultTableModel) Q2.getModel(); 
                                    model.addRow(new Object[]{ Integer.parseInt(Datas.getValueAt(i, 0).toString()),  Integer.parseInt(Datas.getValueAt(i, 2).toString())});  
                                }
                                if(Integer.parseInt(Datas.getValueAt(i, 7).toString()) == 3){
                                    DefaultTableModel model = (DefaultTableModel) Q3.getModel();                                   
                                    model.addRow(new Object[]{ Integer.parseInt(Datas.getValueAt(i, 0).toString()),  Integer.parseInt(Datas.getValueAt(i, 2).toString())});  
                                }
                                    model1.setValueAt("In Queue",Datas.convertRowIndexToModel(i) , 6);
                                    DefaultTableModel model2 = (DefaultTableModel) inputQueue.getModel();
                                    model2.addRow(new Object[]{Datas.getValueAt(i, 0).toString(), Datas.getValueAt(i, 2).toString(), Datas.getValueAt(i, 8).toString()});             
                            }                  
                                    
                            
                            
                        }
                            
                        //MM IMPLEMENTATION MVT
                        if (Datas.getRowCount() > 0){
                            try{
                                int m =64, m1 =0, m2=0;
                                DefaultTableModel model = (DefaultTableModel) inputQueue.getModel();
                                DefaultTableModel modelrun = (DefaultTableModel) MemRun.getModel();
                                modelrun.addRow(new Object [] {m, "Free"}); 
                                  
                                for(int x = 0; x < inputQueue.getRowCount(); x++){
                                    
                                m1 = Integer.parseInt(inputQueue.getValueAt(x,2).toString());
                                if (Integer.parseInt(inputQueue.getValueAt(x,2).toString())<= m)
                                {   
                                    modelrun.setRowCount(0); 
                                    m2= m - m1;
                                        modelrun.addRow(new Object [] {m2, "Free"});
                                        modelrun.addRow(new Object[]{ Integer.parseInt(inputQueue.getValueAt(x, 2).toString()), Integer.parseInt(inputQueue.getValueAt(x, 0).toString())});
                                        addToQueue(Integer.parseInt(inputQueue.getValueAt(x, 0).toString()),  Integer.parseInt(inputQueue.getValueAt(x, 2).toString()), Integer.parseInt(inputQueue.getValueAt(x, 3).toString()));                         
                                        model.removeRow(0);
                                    
                                }
                                }
                                
                                 
                            }
                            catch(ArrayIndexOutOfBoundsException err ){                                  
                             }
                            
                        }
                        //PRIORITY Q1>Q2>Q3 && DONEFLAG FOR RUN TABLE ONCE IN 1 SECOND
                        if (Q1.getRowCount()>0&&doneflag == false){                          
                                runTable(Q1, 0, counter);
                                doneflag = true;
                        }
                        if(Q2.getRowCount()>0&&Q1.getRowCount()==0&&doneflag == false){
                                runTable(Q2, 0, counter);  
                                doneflag = true;
                        }
                        if(Q3.getRowCount()>0&&Q1.getRowCount()==0&&Q2.getRowCount()==0&&doneflag == false){
                                runTable(Q3, 0, counter);
                                doneflag = true;
                        }
                        
                                    
           
                        //IF DONE
                        if (totalNumberOfJobs==Datas.getRowCount()){
                            t.stop();
                            double att = 0;
                            double awt = 0;
                            for (int i = 0; i<Datas.getRowCount();i++){
                                att+=Double.parseDouble(Datas.getValueAt(i, 4).toString());
                                awt+=Double.parseDouble(Datas.getValueAt(i, 5).toString());
                            }
                            DecimalFormat df2 = new DecimalFormat(".##");
                            ATT.setText(String.valueOf(df2.format(att/Datas.getRowCount())));
                            AWT.setText(String.valueOf(df2.format(awt/Datas.getRowCount())));
                            cpuBox.setText("-");
                        }
                        
                        counter++;
                        currentSeconds.setText(String.valueOf(counter));
                    }
                }); t.start();
            }
        }
        else{
                    JOptionPane.showMessageDialog(this, "No file selected.", null, WIDTH);

        }

    }//GEN-LAST:event_startbtnActionPerformed
    //FIND ROW WITH SPECIFIC VALUE
    int getRowByValue(JTable model, String value) {
    for (int i = 0; i < model.getRowCount(); i++) {    
            if (String.valueOf(model.getValueAt(i, 0)).equals(value)) {
                return i;
            }        
    }
    return -1;
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //GET FILE
        stopbtn.doClick();
        JFileChooser chooser = new JFileChooser();
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            FilePath.setText(chooser.getSelectedFile().getAbsolutePath());
        }
        if (FilePath.getText().length()<1){
            JOptionPane.showMessageDialog(this, "No file selected.", null, WIDTH);
        }
        else{
            //JOB CHECK FOR CHECKING THE VALIDITY OF TEST FILE
            if(JobCheck(FilePath.getText())){
                try {
                    DefaultTableModel model = (DefaultTableModel) Datas.getModel();
                    model.setRowCount(0);
                    File f = new File(FilePath.getText());          
                    BufferedReader b = new BufferedReader(new FileReader(f));                    
                    String readLine = "";  
                    int linecounter = 0;
                    while ((readLine = b.readLine()) != null) {
                        if (linecounter != 0){                        
                            String[] parts = readLine.replaceAll("\\s+", "").split("<");
                            String part1 = parts[1].trim();
                            String part2 = parts[2].trim();
                            String part3 = parts[3].trim();      
                            String part4 = parts[4].trim();
                            String part5 = parts[5].trim();
                            model.addRow(new Object[]{Integer.parseInt(part1.replaceAll(">", "")), Integer.parseInt(part2.replaceAll(">", "")), Integer.parseInt(part3.replaceAll(">", "")),null,null,null,null,Integer.parseInt(part4.replaceAll(">", "")),Integer.parseInt(part5.replaceAll(">", ""))});                               
                    }
                    linecounter++;
            }            
                }    
                catch (IOException e) {
                    e.printStackTrace();
                }
            }
        
            doneflag = false;
            qIndicator = 0;
           if(Datas.getRowCount()>0){
               jobList[] JOB = new jobList[50]; //max 50 objects
               for(int i = 0; i < Datas.getRowCount(); i++){
                    JOB[i] = new jobList();
                    JOB[i].ID = Integer.parseInt(Datas.getValueAt(i, 0).toString());                    
               }
           }
           startbtn.setEnabled(true);
           stopbtn.setEnabled(false);
           jButton3.setEnabled(false);
           jButton5.setEnabled(false);
        }  
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //PAUSE
        jButton3.setEnabled(false);
        jButton5.setEnabled(true);
        if(FilePath.getText().length()>0){
        t.stop();}      
    }//GEN-LAST:event_jButton3ActionPerformed

    private void stopbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopbtnActionPerformed
      // RESET ALL VARIABLES
        try{
            startbtn.setEnabled(false);
           
            temp = 0;
            counter = 0;
            currentjob = 0;
            totalNumberOfJobs = 0;
            indexCount = 0;
            FilePath.setText(null);
            cpuBox.setText("-");
            DefaultTableModel model = (DefaultTableModel) Datas.getModel();
            model.setRowCount(0);
            DefaultTableModel model2 = (DefaultTableModel) Gantt.getModel();
            startbtn.setEnabled(true);
            AWT.setText("0");
            ATT.setText("0");
            model2.setRowCount(0);
            DefaultTableModel model3 = (DefaultTableModel) Q1.getModel();
            model3.setRowCount(0);
            DefaultTableModel model4 = (DefaultTableModel) Q2.getModel();
            model4.setRowCount(0);
            DefaultTableModel model5 = (DefaultTableModel) Q3.getModel();
            model5.setRowCount(0);
            DefaultTableModel model6 = (DefaultTableModel) inputQueue.getModel();
            model6.setRowCount(0);
            DefaultTableModel model7 = (DefaultTableModel) MemRun.getModel();
            model7.setRowCount(0);
            currentSeconds.setText(String.valueOf(counter));
            this.invalidate();
            this.validate();
            this.repaint();
             t.stop();
      }
      catch(NullPointerException e ){
            JOptionPane.showMessageDialog(this, e, null, WIDTH);

      }
    }//GEN-LAST:event_stopbtnActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        //RESUME
        jButton3.setEnabled(true);
        jButton5.setEnabled(false);
        if(FilePath.getText().length()>0){
            t.start();
       }       
    }//GEN-LAST:event_jButton5ActionPerformed

    private void FilePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilePathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FilePathActionPerformed

    private void FilePathPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_FilePathPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_FilePathPropertyChange

    private void delaySelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delaySelectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_delaySelectorActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
      //INITIALIZE DELAY SELECTOR
        for (int i = 1000; i > 0; i--){
          delaySelector.addItem(String.valueOf(i));
      }
    }//GEN-LAST:event_formWindowOpened

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.dispose();
        new MainMenu().setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed
   //CHECK IF JOBS ARE VALID 
    public boolean JobCheck(String FileName){
        try{
            File f = new File(FileName);
            BufferedReader b = new BufferedReader(new FileReader(f));
            String readLine ="";
            int linecounter = 0, supposejobs = 0;
          
            while ((readLine = b.readLine()) != null) {               
                if (linecounter == 0){                   
                    
                    String[] parts = readLine.replaceAll(" ","").split("<");
                      
                    String part1 = parts[1];
                    supposejobs = Integer.parseInt(part1.replaceAll(">", ""));                    
                }
                else{
                    String[] parts = readLine.split("<");
                    if (Integer.parseInt(parts[1].trim().replaceAll(">", ""))>90 || Integer.parseInt(parts[2].trim().replaceAll(">", ""))>60||Integer.parseInt(parts[3].trim().replaceAll(">", ""))>20||Integer.parseInt(parts[4].trim().replaceAll(">", ""))>3||Integer.parseInt(parts[4].trim().replaceAll(">", ""))<1) {
                        JOptionPane.showMessageDialog(this, "One/more job has invalid value.", null, WIDTH);
                        return false;
                    }               
                }
                if(linecounter-1 > 20){
                        JOptionPane.showMessageDialog(this, "Reached Max. number of Jobs(20).", null, WIDTH);
                        return false;
                    }
                linecounter++;
            }         
            if(linecounter-1 != supposejobs){
                JOptionPane.showMessageDialog(this, "Supposed number of jobs does not meet the actual number of jobs.", null, WIDTH);
                return false;
            }
            else{
                return true;
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "One column of data is missing.. must be <JOB><AT><CBT><JOBTYPE>", null, WIDTH);
        }
        return false;
    }
    /**
     * @param args the command line arguments
     */
 
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CPU_with_MVT_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CPU_with_MVT_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CPU_with_MVT_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CPU_with_MVT_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CPU_with_MVT_1().setVisible(true);          
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ATT;
    private javax.swing.JLabel AWT;
    private javax.swing.JTable Datas;
    private javax.swing.JTextField FilePath;
    private javax.swing.JTable Gantt;
    private javax.swing.JTable MemRun;
    private javax.swing.JTable Q1;
    private javax.swing.JTable Q2;
    private javax.swing.JTable Q3;
    private javax.swing.JTextField cpuBox;
    private javax.swing.JLabel currentSeconds;
    private javax.swing.JComboBox<String> delaySelector;
    private javax.swing.JTable inputQueue;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JButton startbtn;
    private javax.swing.JButton stopbtn;
    // End of variables declaration//GEN-END:variables
}